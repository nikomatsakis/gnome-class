use ast::*;
use lalrpop_intern::intern;
use parser;
use quote::Tokens;
use tok::Tok;

#[LALR]
grammar<'input>;

pub Program: Program = {
    Class* => Program { classes: <> }
};

Class: Class = {
    "class" <name:Id> <extends:Extends> <b:@L> <blk:"{..}"> =>? {
        let members = parser::parse_members(blk, b)?;
        Ok(Class { name, extends, members })
    }
};

Extends: Option<Path> = {
    ("extends" <TypePath>)?
};

pub Members: Vec<Member> = {
    Member*
};

// Allow non-Rust keywords as contextual keywords.
Id: Identifier = {
    IdStr => Identifier { str: intern(<>) }
};

IdStr: &'input str = {
    "private_init" => "private_init",
    "class" => "class",
    "extends" => "extends",
    "signal" => "signal",
    OtherId => <>,
};

Member: Member = {
    PrivateStruct => Member::PrivateStruct(<>),
    PrivateInit => Member::PrivateInit(<>),
    Method => Member::Method(<>),
    Signal => Member::Signal(<>),
};

PrivateStruct: PrivateStruct = {
    "struct" <name:Id> <s:@L> <fields:"{..}"> =>? {
        let fields = parser::parse_var_tys(fields, s)?;
        Ok(PrivateStruct { name, fields })
    }
};

PrivateInit: CodeBlock = {
    // We do "let _ = name" so we can ignore "name"
    "private_init" "(" ")" "->" <name:Id> <code:CodeBlock> => { let _ = name; code }
};

Method: Method = {
    "fn" <name:Id> <fn_def:FnDef> => {
        Method { name, fn_def }
    }
};

Signal: Signal = {
    "signal" <name:Id> <sig:FnSig> <code:SignalBody> => Signal { name, sig, code }
};

SignalBody: Option<CodeBlock> = {
    <CodeBlock> => Some(<>),
    ";" => None
};

FnDef: FnDef = {
    <sig:FnSig> <code:CodeBlock> => FnDef { sig, code },
};

FnSig: FnSig = {
    "(" "&" "self" ")" <return_ty:ReturnTy> => {
        FnSig { args: vec![], return_ty }
    },
    "(" "&" "self" "," <args:Comma<VarTy>> ")" <return_ty:ReturnTy> => {
        FnSig { args, return_ty }
    },
};

ReturnTy: Option<Type> = {
    ("->" <Type>)?
};

pub VarTys: Vec<VarTy> = {
    VarTy*
};

VarTy: VarTy = {
    <name:Id> ":" <ty:Type> => VarTy { name, ty },
};

Type: Type = {
    Type1,
    <h:Type1> <t:("+" <Type1>)+> => Type::Sum(Some(h).into_iter().chain(t).collect()),
};

Type1: Type = {
    TypePath => Type::Path(<>),
    "[" <Type> "]" => Type::Array(Box::new(<>)),
};

CodeBlock: CodeBlock = {
    "{..}" => {
        let mut tokens = Tokens::new();
        tokens.append(<>);
        CodeBlock { tokens }
    }
};

ExprPath: Path = {
    AnyPath<"::">
};

TypePath: Path = {
    AnyPath<()>
};

AnyPath<S>: Path = {
    BasePath<S>,
    <b:AnyPath<S>> "::" <e:PathId<S>> => Path::Extend(Box::new(b), e),
};

BasePath<S>: Path = {
    "::" => Path::FromRoot,
    "self" => Path::FromSelf,
    "super" => Path::FromSuper,
    PathId<S> => Path::From(<>),
    TraitItemId => Path::FromTraitItem(Box::new(<>)),
};

PathId<S>: PathId = {
    <name:Id> <tys:(S "<" <Comma<Type>> ">")?> => {
        let tys = tys.unwrap_or_default();
        PathId { name, tys }
    }
};

TraitItemId: TraitItemId = {
    "<" <self_ty:Type> "as" <trait_ref:TypePath> ">" "::" <item:Id> => {
        TraitItemId { self_ty, trait_ref, item }
    }
};

Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> => {
        let mut h = h;
        h.extend(t);
        h
    }
};

extern {
    type Location = usize;
    type Error = ::errors::Error;
    enum Tok<'input> {
        "class" => Tok::ClassKeyword,
        "as" => Tok::AsKeyword,
        "struct" => Tok::StructKeyword,
        "fn" => Tok::FnKeyword,
        "private_init" => Tok::PrivateInitKeyword,
        "self" => Tok::SelfKeyword,
        "super" => Tok::SuperKeyword,
        "extends" => Tok::ExtendsKeyword,
        "signal" => Tok::SignalKeyword,
        "{..}" => Tok::Block(<&'input str>),
        OtherId => Tok::Id(<&'input str>),
        ":" => Tok::Colon,
        "::" => Tok::ColonColon,
        "<" => Tok::LessThan,
        ">" => Tok::GreaterThan,
        "[" => Tok::LeftBracket,
        "]" => Tok::RightBracket,
        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        "->" => Tok::ThinArrow,
        "+" => Tok::Plus,
        "," => Tok::Comma,
        "&" => Tok::Ampersand,
        ";" => Tok::Semi
    }
}

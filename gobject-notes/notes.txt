-*- org -*-

* TODO Support subclassing from anything other than GObject

** Grammar supports "class Foo extends Bar"

** Need to support "class Foo: ParentClass, Iface1, Iface2" instead

* TODO Virtual + non-virtual methods?

Virtual ones have a slot in FooClass; non-virtual ones don't.

* Reordering class fields is an ABI break.  Shoule we warn about this / how?

* Notes on syn

** Augmenting the language

It feels like, out of the box, proc_macro2 and syn provide machinery
to implement your own attributes or derive-like things.

However, gnome-class more or less wants to augment the language.

I had to write src/parser/mod.rs keyword() by basically copying a bit
from syn/synom/src/tokens.rs.  Could there be a built-in way to do
this instead?

    impl Synom for my_ast::Foo {
        named!(parse -> Self, do_parse!(
            call!(keyword("foo")) >>
            other_stuff: ...      >>
            (my_ast::Foo { ... other_stuff ... })
        ));
    }

** Tests for just your parser

It's not obvious how to write your parser bit by bit, with tests along
the way.  In particular, how to get a valid TokenStream so you can run
syn on it, without having the whole proc_macro2 machinery in place.

    fn parses_class_name() {
        let raw = "class Foo {}";

        let token_stream = raw.parse::<TokenStream>().unwrap();

        // We can't use
        //
        //   let class: ast::Class = syn::parse(token_stream).unwrap().1;
        //
        // because syn::parse() takes a proc_macro::TokenStream, not a
        // proc_macro2::TokenStream.
        //
        // So, we'll do the conversion to a Cursor by hand.

        let buffer = SynomBuffer::new(token_stream);
        let cursor = buffer.begin();
        let class: ast::Class = ast::Class::parse(cursor).unwrap().1;
        assert_eq!(class.name.as_ref(), "Foo");
    }

** Error messages

I couldn't find a way to create a meaningful ParseError.  The exported
parse_error() doesn't let one provide a string or anything.

* New syntax

This section has moved; see the gobject-notes/syntax.md file.

* Antoyo on proc-macro2:

<antoyo> I didn't know about parse_error(), but you might get better
errors by using std::compile_error
(https://doc.rust-lang.org/stable/std/macro.compile_error.html). Let
me know if you have issues to set the right Span on this, since it's
tricky.

fn error(msg: &str, span: proc_macro2::Span) -> Tokens {
    let result = quote! {
        compile_error!(#msg)
    };
    let mut expr: Expr = parse(result.clone().into()).unwrap();
    if let Mac(ref mut mac) = expr.node {
        mac.tokens[0].0.span = span;
    }
    quote! {
        #expr
    }
}

<antoyo> Instead of returning the generated code, you return that.

* Inspiration:

** Rustc's structure: https://github.com/rust-lang/rust/blob/master/src/librustc/README.md
